import org.renjin.script.RenjinScriptEngineFactory;
import org.renjin.sexp.SEXP;

import javax.script.ScriptEngine;
import javax.script.ScriptException;
import java.io.*;

public class Roperations {

    // create a script engine manager
    RenjinScriptEngineFactory factory = new RenjinScriptEngineFactory();
    // create a Renjin engine:
    ScriptEngine engine = factory.getScriptEngine();


    public String generateTable(Object repoName) throws ScriptException, IOException {
        //add an "inputData" variable, which is the file path of the json files that are generated by bandit
        engine.put("inputData", ("src\\main\\bandit_output\\"+repoName+"_vuln.json"));
        //Code to store R output in the Java program
        StringWriter outputWriter = new StringWriter();
        //set the writer of Renjin so that the output is stored in a java StringWriter
        engine.getContext().setWriter(outputWriter);
        //the output of the R script will now go to a StringWriter rather than the console
        engine.eval(new java.io.FileReader("src\\main\\Rscripts\\generateVulnStats.R"));
        engine.eval("print(summary_table)");
        //convert the StringWriter output to a String
        String output = outputWriter.toString();
        //print the result to console
//        System.out.println("The R script says:\n" + output);

        SEXP result = (SEXP)engine.eval(new java.io.FileReader("src\\main\\Rscripts\\generateVulnStats.R"));
        System.out.println("The R script says: " + result);
        // determine the Java class of the result:
        Class objectType = result.getClass();
        System.out.println("Java class is: " + objectType.getName());
        // use the getTypeName() method of the SEXP object to get R's type name:
        System.out.println("In R, typeof(res) would give '" + result.getTypeName() + "'");
        return output;
    }

    public String generateLineNumbers(Object repoName) throws ScriptException, IOException {
        engine.put("inputData", ("src\\main\\bandit_output\\"+repoName+"_vuln.json"));
        StringWriter outputWriter = new StringWriter();
        engine.getContext().setWriter(outputWriter);
        engine.eval(new java.io.FileReader("src\\main\\Rscripts\\generateVulnStats.R"));
        engine.eval("print(line_no_table)");
        String output = outputWriter.toString();
        return output;
    }

    public String generateTableByFile(Object repoName) throws ScriptException, IOException {
        engine.put("inputData", ("src\\main\\bandit_output\\"+repoName+"_vuln.json"));
        StringWriter outputWriter = new StringWriter();
        engine.getContext().setWriter(outputWriter);
        engine.eval(new java.io.FileReader("src\\main\\Rscripts\\generateVulnStats.R"));
        engine.eval("print(filename_table)");
        String output = outputWriter.toString();
        return output;
    }
    public String generateLineNoAndSev(Object repoName) throws ScriptException, IOException {
        engine.put("inputData", ("src\\main\\bandit_output\\"+repoName+"_vuln.json"));
        StringWriter outputWriter = new StringWriter();
        engine.getContext().setWriter(outputWriter);
        engine.eval(new java.io.FileReader("src\\main\\Rscripts\\generateVulnStats.R"));
        engine.eval("print(issue_sev_vs_line_no)");
        String output = outputWriter.toString();
        return output;
    }

    public String generateLow(Object repoName) throws ScriptException, IOException {
        engine.put("inputData", ("src\\main\\bandit_output\\"+repoName+"_vuln.json"));
        StringWriter outputWriter = new StringWriter();
        engine.getContext().setWriter(outputWriter);
        engine.eval(new java.io.FileReader("src\\main\\Rscripts\\generateVulnStats.R"));
        engine.eval("print(mean_low_sev)");
        String output = outputWriter.toString();
        return output;
    }

    public String generateMedium(Object repoName) throws ScriptException, IOException {
        engine.put("inputData", ("src\\main\\bandit_output\\"+repoName+"_vuln.json"));
        StringWriter outputWriter = new StringWriter();
        engine.getContext().setWriter(outputWriter);
        engine.eval(new java.io.FileReader("src\\main\\Rscripts\\generateVulnStats.R"));
        engine.eval("print(mean_medium_sev)");
        String output = outputWriter.toString();
        return output;
    }

    public String generateHigh(Object repoName) throws ScriptException, IOException {
        engine.put("inputData", ("src\\main\\bandit_output\\"+repoName+"_vuln.json"));
        StringWriter outputWriter = new StringWriter();
        engine.getContext().setWriter(outputWriter);
        engine.eval(new java.io.FileReader("src\\main\\Rscripts\\generateVulnStats.R"));
        engine.eval("print(mean_high_sev)");
        String output = outputWriter.toString();
        return output;
    }

    public String generateCSV(Object repoName) throws ScriptException, IOException {
        engine.put("inputData", ("src\\main\\bandit_output\\"+repoName+"_vuln.json"));
        StringWriter outputWriter = new StringWriter();
        engine.getContext().setWriter(outputWriter);
        engine.eval(new java.io.FileReader("src\\main\\Rscripts\\generateCSV.R"));
        String output = outputWriter.toString();
        return output;
    }

    public String generateResults() throws ScriptException, IOException {
        StringWriter outputWriter = new StringWriter();
        engine.getContext().setWriter(outputWriter);
        engine.eval(new java.io.FileReader("src\\main\\Rscripts\\generateResults.R"));
        String output = outputWriter.toString();
        return output;
    }
}
