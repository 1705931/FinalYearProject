{
  "errors": [
    {
      "filename": "wireshark\\tools\\generate-bacnet-vendors.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "wireshark\\tools\\netscreen2dump.py",
      "reason": "syntax error while parsing AST from file"
    },
    {
      "filename": "wireshark\\tools\\pkt-from-core.py",
      "reason": "syntax error while parsing AST from file"
    }
  ],
  "generated_at": "2021-01-26T16:39:00Z",
  "metrics": {
    "_totals": {
      "CONFIDENCE.HIGH": 169.0,
      "CONFIDENCE.LOW": 20.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 2.0,
      "SEVERITY.LOW": 141.0,
      "SEVERITY.MEDIUM": 46.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 42420,
      "nosec": 0
    },
    "wireshark\\doc\\extcap_example.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 403,
      "nosec": 0
    },
    "wireshark\\test\\conftest.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 28,
      "nosec": 0
    },
    "wireshark\\test\\fixtures.py": {
      "CONFIDENCE.HIGH": 14.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 14.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 277,
      "nosec": 0
    },
    "wireshark\\test\\fixtures_ws.py": {
      "CONFIDENCE.HIGH": 7.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 7.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 290,
      "nosec": 0
    },
    "wireshark\\test\\matchers.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 39,
      "nosec": 0
    },
    "wireshark\\test\\sampleif.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 31,
      "nosec": 0
    },
    "wireshark\\test\\subprocesstest.py": {
      "CONFIDENCE.HIGH": 4.0,
      "CONFIDENCE.LOW": 3.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 4.0,
      "SEVERITY.MEDIUM": 3.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 215,
      "nosec": 0
    },
    "wireshark\\test\\suite_capture.py": {
      "CONFIDENCE.HIGH": 4.0,
      "CONFIDENCE.LOW": 8.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 4.0,
      "SEVERITY.MEDIUM": 8.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 478,
      "nosec": 0
    },
    "wireshark\\test\\suite_clopts.py": {
      "CONFIDENCE.HIGH": 4.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 4.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 229,
      "nosec": 0
    },
    "wireshark\\test\\suite_decryption.py": {
      "CONFIDENCE.HIGH": 5.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 5.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 1201,
      "nosec": 0
    },
    "wireshark\\test\\suite_dfilter\\__init__.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 7,
      "nosec": 0
    },
    "wireshark\\test\\suite_dfilter\\dfiltertest.py": {
      "CONFIDENCE.HIGH": 6.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 6.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 46,
      "nosec": 0
    },
    "wireshark\\test\\suite_dfilter\\group_bytes_ether.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 78,
      "nosec": 0
    },
    "wireshark\\test\\suite_dfilter\\group_bytes_ipv6.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 78,
      "nosec": 0
    },
    "wireshark\\test\\suite_dfilter\\group_bytes_type.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 12,
      "nosec": 0
    },
    "wireshark\\test\\suite_dfilter\\group_dfunction_string.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 28,
      "nosec": 0
    },
    "wireshark\\test\\suite_dfilter\\group_double.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 48,
      "nosec": 0
    },
    "wireshark\\test\\suite_dfilter\\group_integer.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 114,
      "nosec": 0
    },
    "wireshark\\test\\suite_dfilter\\group_integer_1byte.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 12,
      "nosec": 0
    },
    "wireshark\\test\\suite_dfilter\\group_ipv4.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 99,
      "nosec": 0
    },
    "wireshark\\test\\suite_dfilter\\group_membership.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 41,
      "nosec": 0
    },
    "wireshark\\test\\suite_dfilter\\group_range_method.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 24,
      "nosec": 0
    },
    "wireshark\\test\\suite_dfilter\\group_scanner.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 24,
      "nosec": 0
    },
    "wireshark\\test\\suite_dfilter\\group_string_type.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 131,
      "nosec": 0
    },
    "wireshark\\test\\suite_dfilter\\group_stringz.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 15,
      "nosec": 0
    },
    "wireshark\\test\\suite_dfilter\\group_time_relative.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 15,
      "nosec": 0
    },
    "wireshark\\test\\suite_dfilter\\group_time_type.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 69,
      "nosec": 0
    },
    "wireshark\\test\\suite_dfilter\\group_tvb.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 41,
      "nosec": 0
    },
    "wireshark\\test\\suite_dfilter\\group_uint64.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 12,
      "nosec": 0
    },
    "wireshark\\test\\suite_dissection.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 234,
      "nosec": 0
    },
    "wireshark\\test\\suite_dissectors\\__init__.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 7,
      "nosec": 0
    },
    "wireshark\\test\\suite_dissectors\\dissectorstest.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 69,
      "nosec": 0
    },
    "wireshark\\test\\suite_dissectors\\group_asterix.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 3750,
      "nosec": 0
    },
    "wireshark\\test\\suite_extcaps.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 66,
      "nosec": 0
    },
    "wireshark\\test\\suite_fileformats.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 4.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 4.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 209,
      "nosec": 0
    },
    "wireshark\\test\\suite_follow.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 52,
      "nosec": 0
    },
    "wireshark\\test\\suite_io.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 3.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 3.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 56,
      "nosec": 0
    },
    "wireshark\\test\\suite_mergecap.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 215,
      "nosec": 0
    },
    "wireshark\\test\\suite_nameres.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 81,
      "nosec": 0
    },
    "wireshark\\test\\suite_outputformats.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 72,
      "nosec": 0
    },
    "wireshark\\test\\suite_release.py": {
      "CONFIDENCE.HIGH": 3.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 3.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 34,
      "nosec": 0
    },
    "wireshark\\test\\suite_sharkd.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 2.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 399,
      "nosec": 0
    },
    "wireshark\\test\\suite_text2pcap.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 2.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 2.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 441,
      "nosec": 0
    },
    "wireshark\\test\\suite_unittests.py": {
      "CONFIDENCE.HIGH": 5.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 5.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 90,
      "nosec": 0
    },
    "wireshark\\test\\suite_wslua.py": {
      "CONFIDENCE.HIGH": 5.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 5.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 244,
      "nosec": 0
    },
    "wireshark\\test\\test.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 104,
      "nosec": 0
    },
    "wireshark\\test\\util_dump_dhcp_pcap.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 27,
      "nosec": 0
    },
    "wireshark\\tools\\WiresharkXML.py": {
      "CONFIDENCE.HIGH": 3.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 2.0,
      "SEVERITY.MEDIUM": 1.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 205,
      "nosec": 0
    },
    "wireshark\\tools\\asn2wrs.py": {
      "CONFIDENCE.HIGH": 11.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 1.0,
      "SEVERITY.LOW": 9.0,
      "SEVERITY.MEDIUM": 1.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 6489,
      "nosec": 0
    },
    "wireshark\\tools\\check_dissector_urls.py": {
      "CONFIDENCE.HIGH": 4.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 4.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 172,
      "nosec": 0
    },
    "wireshark\\tools\\check_spelling.py": {
      "CONFIDENCE.HIGH": 4.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 4.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 247,
      "nosec": 0
    },
    "wireshark\\tools\\check_tfs.py": {
      "CONFIDENCE.HIGH": 4.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 4.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 134,
      "nosec": 0
    },
    "wireshark\\tools\\check_typed_item_calls.py": {
      "CONFIDENCE.HIGH": 6.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 6.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 335,
      "nosec": 0
    },
    "wireshark\\tools\\checklicenses.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 2.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 218,
      "nosec": 0
    },
    "wireshark\\tools\\delete_includes.py": {
      "CONFIDENCE.HIGH": 4.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 4.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 247,
      "nosec": 0
    },
    "wireshark\\tools\\generate-bacnet-vendors.py": {
      "loc": 29,
      "nosec": 0
    },
    "wireshark\\tools\\generate-dissector.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 101,
      "nosec": 0
    },
    "wireshark\\tools\\generate-nl80211-fields.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 292,
      "nosec": 0
    },
    "wireshark\\tools\\generate-sysdig-event.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 1.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 298,
      "nosec": 0
    },
    "wireshark\\tools\\html2text.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 151,
      "nosec": 0
    },
    "wireshark\\tools\\indexcap.py": {
      "CONFIDENCE.HIGH": 5.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 4.0,
      "SEVERITY.MEDIUM": 1.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 231,
      "nosec": 0
    },
    "wireshark\\tools\\json2pcap\\json2pcap.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 462,
      "nosec": 0
    },
    "wireshark\\tools\\lex.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 2.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 716,
      "nosec": 0
    },
    "wireshark\\tools\\make-manuf.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 1.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 216,
      "nosec": 0
    },
    "wireshark\\tools\\make-no-reassembly-profile.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 2.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 46,
      "nosec": 0
    },
    "wireshark\\tools\\make-packet-dcm.py": {
      "CONFIDENCE.HIGH": 7.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 6.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 184,
      "nosec": 0
    },
    "wireshark\\tools\\make-plugin-reg.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 111,
      "nosec": 0
    },
    "wireshark\\tools\\make-regs.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 87,
      "nosec": 0
    },
    "wireshark\\tools\\make-services.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 1.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 141,
      "nosec": 0
    },
    "wireshark\\tools\\make-tls-ct-logids.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 74,
      "nosec": 0
    },
    "wireshark\\tools\\make-usb.py": {
      "CONFIDENCE.HIGH": 1.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 1.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 103,
      "nosec": 0
    },
    "wireshark\\tools\\ncp2222.py": {
      "CONFIDENCE.HIGH": 5.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 5.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 14967,
      "nosec": 0
    },
    "wireshark\\tools\\netscreen2dump.py": {
      "loc": 85,
      "nosec": 0
    },
    "wireshark\\tools\\parse_xml2skinny_dissector.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 1.0,
      "SEVERITY.MEDIUM": 1.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 779,
      "nosec": 0
    },
    "wireshark\\tools\\pkt-from-core.py": {
      "loc": 352,
      "nosec": 0
    },
    "wireshark\\tools\\pre-commit-ignore.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 30,
      "nosec": 0
    },
    "wireshark\\tools\\rdps.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 88,
      "nosec": 0
    },
    "wireshark\\tools\\sharkd_shell.py": {
      "CONFIDENCE.HIGH": 5.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 1.0,
      "SEVERITY.LOW": 4.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 265,
      "nosec": 0
    },
    "wireshark\\tools\\update-appdata.py": {
      "CONFIDENCE.HIGH": 7.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 7.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 90,
      "nosec": 0
    },
    "wireshark\\tools\\update-tools-help.py": {
      "CONFIDENCE.HIGH": 2.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 2.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 60,
      "nosec": 0
    },
    "wireshark\\tools\\validate-commit.py": {
      "CONFIDENCE.HIGH": 5.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 4.0,
      "SEVERITY.MEDIUM": 1.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 176,
      "nosec": 0
    },
    "wireshark\\tools\\wireshark_be.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 148,
      "nosec": 0
    },
    "wireshark\\tools\\wireshark_gen.py": {
      "CONFIDENCE.HIGH": 0.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 0.0,
      "SEVERITY.MEDIUM": 0.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 1817,
      "nosec": 0
    },
    "wireshark\\tools\\yacc.py": {
      "CONFIDENCE.HIGH": 14.0,
      "CONFIDENCE.LOW": 0.0,
      "CONFIDENCE.MEDIUM": 0.0,
      "CONFIDENCE.UNDEFINED": 0.0,
      "SEVERITY.HIGH": 0.0,
      "SEVERITY.LOW": 5.0,
      "SEVERITY.MEDIUM": 9.0,
      "SEVERITY.UNDEFINED": 0.0,
      "loc": 2039,
      "nosec": 0
    }
  },
  "results": [
    {
      "code": "20     global _use_native_pytest, pytest\n21     assert not _fallback\n22     import pytest\n",
      "filename": "wireshark\\test\\fixtures.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 21,
      "line_range": [
        21
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "31     \"\"\"\n32     assert callable(callable_or_scope) or callable_or_scope is None, \\\n33         'scope must be a keyword argument'\n34     if _use_native_pytest:\n",
      "filename": "wireshark\\test\\fixtures.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 32,
      "line_range": [
        32,
        33
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "60     \"\"\"Enables use of fixtures within test methods of unittest.TestCase.\"\"\"\n61     assert issubclass(cls, unittest.TestCase)\n62 \n63     for name in dir(cls):\n",
      "filename": "wireshark\\test\\fixtures.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 61,
      "line_range": [
        61,
        62
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "147             return scope\n148         assert scope in self.SCOPES, 'unsupported scope'\n149         # invoked with arguments, should return a decorator\n150         return lambda func: self._add_fixture(scope, autouse, name, func)\n",
      "filename": "wireshark\\test\\fixtures.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 148,
      "line_range": [
        148,
        149
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "220         fixture_scope_index = _FixturesManager.SCOPES.index(spec.scope)\n221         assert fixture_scope_index <= context_scope_index\n222         if spec.params:\n",
      "filename": "wireshark\\test\\fixtures.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 221,
      "line_range": [
        221
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "277         if not spec:\n278             assert argname == 'request'\n279             return self\n",
      "filename": "wireshark\\test\\fixtures.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 278,
      "line_range": [
        278
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "286             value, ok = self._context.cached_result(spec)\n287             assert ok, 'Failed to execute fixture %s' % (spec,)\n288         return value\n",
      "filename": "wireshark\\test\\fixtures.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 287,
      "line_range": [
        287
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "312     def setUp(self):\n313         assert _session_context, 'must call create_session() first!'\n314         function_context = _ExecutionScope('function', _session_context)\n",
      "filename": "wireshark\\test\\fixtures.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 313,
      "line_range": [
        313
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "325     # Only the leaf test case class should be decorated!\n326     assert not hasattr(cls, '_orig_setUp')\n327     assert not hasattr(cls, '_orig_tearDown')\n",
      "filename": "wireshark\\test\\fixtures.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 326,
      "line_range": [
        326
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "326     assert not hasattr(cls, '_orig_setUp')\n327     assert not hasattr(cls, '_orig_tearDown')\n328     cls._orig_setUp, cls.setUp = cls.setUp, setUp\n",
      "filename": "wireshark\\test\\fixtures.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 327,
      "line_range": [
        327
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "333     def __init__(self, args):\n334         assert isinstance(args, argparse.Namespace)\n335         self.args = args\n",
      "filename": "wireshark\\test\\fixtures.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 334,
      "line_range": [
        334
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "349     global _fallback\n350     assert not _use_native_pytest\n351     if _fallback:\n",
      "filename": "wireshark\\test\\fixtures.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 350,
      "line_range": [
        350
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "359     global _session_context, _config\n360     assert not _use_native_pytest\n361     _session_context = _ExecutionScope('session', None)\n",
      "filename": "wireshark\\test\\fixtures.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 360,
      "line_range": [
        360
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "368     global _session_context\n369     assert not _use_native_pytest\n370     _session_context = None\n",
      "filename": "wireshark\\test\\fixtures.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 369,
      "line_range": [
        369
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "13 import re\n14 import subprocess\n15 import sys\n",
      "filename": "wireshark\\test\\fixtures_ws.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 14,
      "line_range": [
        14
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "19 import fixtures\n20 import subprocesstest\n21 \n22 \n23 @fixtures.fixture(scope='session')\n24 def capture_interface(request, cmd_dumpcap):\n",
      "filename": "wireshark\\test\\fixtures_ws.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocesstest module.",
      "line_number": 20,
      "line_range": [
        20,
        21,
        22,
        23
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "31         fixtures.skip('Capture tests are disabled via --disable-capture')\n32     proc = subprocess.Popen((cmd_dumpcap, '-D'), stdout=subprocess.PIPE,\n33                             stderr=subprocess.PIPE, universal_newlines=True)\n34     outs, errs = proc.communicate()\n",
      "filename": "wireshark\\test\\fixtures_ws.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 32,
      "line_range": [
        32,
        33
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "47     try:\n48         subprocess.check_output((cmd_dumpcap, '-L', '-i', iface),\n49                                 stderr=subprocess.STDOUT,\n50                                 universal_newlines=True)\n51         return iface\n",
      "filename": "wireshark\\test\\fixtures_ws.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 48,
      "line_range": [
        48,
        49,
        50
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "163     try:\n164         tshark_v = subprocess.check_output(\n165             (cmd_tshark, '--version'),\n166             stderr=subprocess.PIPE,\n167             universal_newlines=True,\n168             env=make_env()\n169         )\n",
      "filename": "wireshark\\test\\fixtures_ws.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 164,
      "line_range": [
        164,
        165,
        166,
        167,
        168
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "365             if sys.platform == 'darwin':\n366                 subprocess.check_call(['screencapture', filename])\n367             else:\n",
      "filename": "wireshark\\test\\fixtures_ws.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 366,
      "line_range": [
        366
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "365             if sys.platform == 'darwin':\n366                 subprocess.check_call(['screencapture', filename])\n367             else:\n",
      "filename": "wireshark\\test\\fixtures_ws.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 366,
      "line_range": [
        366
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "16 import re\n17 import subprocess\n18 import sys\n",
      "filename": "wireshark\\test\\subprocesstest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 17,
      "line_range": [
        17
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "131                 proc.kill()\n132             except Exception:\n133                 pass\n",
      "filename": "wireshark\\test\\subprocesstest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 132,
      "line_range": [
        132
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "196         capinfos_cmd.append(cap_file)\n197         capinfos_data = subprocess.check_output(capinfos_cmd)\n198         capinfos_stdout = capinfos_data.decode('UTF-8', 'replace')\n",
      "filename": "wireshark\\test\\subprocesstest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 197,
      "line_range": [
        197
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "262             # fixture (via a test method parameter or class decorator).\n263             assert not (env is None and hasattr(self, '_fixture_request')), \\\n264                 \"Decorate class with @fixtures.mark_usefixtures('test_env')\"\n265         proc = LoggingPopen(proc_args, stdin=stdin, env=env, shell=shell, log_fd=self.log_fd, cwd=cwd)\n",
      "filename": "wireshark\\test\\subprocesstest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 263,
      "line_range": [
        263,
        264
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "264                 \"Decorate class with @fixtures.mark_usefixtures('test_env')\"\n265         proc = LoggingPopen(proc_args, stdin=stdin, env=env, shell=shell, log_fd=self.log_fd, cwd=cwd)\n266         self.processes.append(proc)\n",
      "filename": "wireshark\\test\\subprocesstest.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 265,
      "line_range": [
        265
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "283         '''Start a process and wait for it to finish.'''\n284         process = self.startProcess(args, env=env, shell=shell, cwd=cwd)\n285         process.wait_and_log()\n",
      "filename": "wireshark\\test\\subprocesstest.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 284,
      "line_range": [
        284
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "289         '''Start a process and wait for it to finish. Check its return code.'''\n290         process = self.runProcess(args, env=env, shell=shell, cwd=cwd)\n291         self.assertEqual(process.returncode, expected_return)\n",
      "filename": "wireshark\\test\\subprocesstest.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 290,
      "line_range": [
        290
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "16 import socket\n17 import subprocess\n18 import subprocesstest\n",
      "filename": "wireshark\\test\\suite_capture.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 17,
      "line_range": [
        17
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "17 import subprocess\n18 import subprocesstest\n19 import sys\n",
      "filename": "wireshark\\test\\suite_capture.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocesstest module.",
      "line_number": 18,
      "line_range": [
        18
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "100             ),\n101             shell=True\n102             )\n103         else:\n104             capture_proc = self.runProcess(capture_command(cmd,\n105                 '-i', capture_interface,\n106                 '-p',\n107                 '-w', testout_file,\n108                 '-c', '10',\n109                 '-a', 'duration:{}'.format(capture_duration),\n110                 '-f', cfilter,\n111             ))\n112         stop_traffic()\n",
      "filename": "wireshark\\test\\suite_capture.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 101,
      "line_range": [
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "98                 '>', testout_file,\n99                 shell=True\n100             ),\n101             shell=True\n102             )\n103         else:\n104             capture_proc = self.runProcess(capture_command(cmd,\n105                 '-i', capture_interface,\n106                 '-p',\n107                 '-w', testout_file,\n108                 '-c', '10',\n",
      "filename": "wireshark\\test\\suite_capture.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 99,
      "line_range": [
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "133             os.unlink(fifo_file)\n134         except Exception:\n135             pass\n",
      "filename": "wireshark\\test\\suite_capture.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 134,
      "line_range": [
        134
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "139             ('{0} > {1}'.format(slow_dhcp_cmd, fifo_file)),\n140             shell=True)\n141         capture_proc = self.assertRun(capture_command(cmd,\n142             '-i', fifo_file,\n143             '-p',\n",
      "filename": "wireshark\\test\\suite_capture.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 140,
      "line_range": [
        138,
        139,
        140
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "164             '-a', 'duration:{}'.format(capture_duration),\n165             shell=True\n166         )\n167         is_gui = type(cmd) != str and '-k' in cmd[0]\n168         if is_gui:\n169             capture_cmd += ' -o console.log.level:127'\n170         pipe_proc = self.assertRun(slow_dhcp_cmd + ' | ' + capture_cmd, shell=True)\n",
      "filename": "wireshark\\test\\suite_capture.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 165,
      "line_range": [
        161,
        162,
        163,
        164,
        165
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "169             capture_cmd += ' -o console.log.level:127'\n170         pipe_proc = self.assertRun(slow_dhcp_cmd + ' | ' + capture_cmd, shell=True)\n171         if is_gui:\n",
      "filename": "wireshark\\test\\suite_capture.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 170,
      "line_range": [
        170
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "251         ))\n252         pipe_proc = self.assertRun(cat100_dhcp_cmd + ' | ' + capture_cmd, shell=True)\n253         self.assertTrue(os.path.isfile(testout_file))\n",
      "filename": "wireshark\\test\\suite_capture.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 252,
      "line_range": [
        252
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "286         ))\n287         pipe_proc = self.assertRun(cat100_dhcp_cmd + ' | ' + capture_cmd, shell=True)\n288 \n",
      "filename": "wireshark\\test\\suite_capture.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 287,
      "line_range": [
        287
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "336                 os.unlink(fifo_file)\n337             except Exception: pass\n338             os.mkfifo(fifo_file)\n",
      "filename": "wireshark\\test\\suite_capture.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 337,
      "line_range": [
        337
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "339             cat_cmd = subprocesstest.cat_cap_file_command(in_files)\n340             fifo_procs.append(self.startProcess(('{0} > {1}'.format(cat_cmd, fifo_file)), shell=True))\n341 \n",
      "filename": "wireshark\\test\\suite_capture.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 340,
      "line_range": [
        340
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "14 import os.path\n15 import subprocess\n16 import subprocesstest\n",
      "filename": "wireshark\\test\\suite_clopts.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 15,
      "line_range": [
        15
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "15 import subprocess\n16 import subprocesstest\n17 import fixtures\n",
      "filename": "wireshark\\test\\suite_clopts.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocesstest module.",
      "line_number": 16,
      "line_range": [
        16
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "166                 self.log_fd.truncate()\n167             except Exception:\n168                 pass\n",
      "filename": "wireshark\\test\\suite_clopts.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 167,
      "line_range": [
        167
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "175             env['LANG'] = 'en_US.UTF-8'\n176             g_contents = subprocess.check_output((cmd_tshark, '-G', glossary), env=env, stderr=subprocess.PIPE)\n177             decoded = True\n",
      "filename": "wireshark\\test\\suite_clopts.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 176,
      "line_range": [
        176
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "13 import shutil\n14 import subprocess\n15 import subprocesstest\n",
      "filename": "wireshark\\test\\suite_decryption.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 14,
      "line_range": [
        14
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "14 import subprocess\n15 import subprocesstest\n16 import sys\n",
      "filename": "wireshark\\test\\suite_decryption.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocesstest module.",
      "line_number": 15,
      "line_range": [
        15
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "1160     # used to import keys for decryption. Use GnuTLS p11tool as workaround.\n1161     softhsm_version = subprocess.check_output([softhsm_tool, '--version'],\n1162             universal_newlines=True).strip()\n1163     use_p11tool = softhsm_version in ('2.0.0', '2.1.0', '2.2.0')\n",
      "filename": "wireshark\\test\\suite_decryption.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 1161,
      "line_range": [
        1161,
        1162
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "1192     pin = 'Secret'\n1193     subprocess.check_call([softhsm_tool, '--init-token', '--slot', '0',\n1194         '--label', token_name, '--so-pin', 'Supersecret', '--pin', pin],\n1195         env=tool_env)\n1196     if use_p11tool:\n",
      "filename": "wireshark\\test\\suite_decryption.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 1193,
      "line_range": [
        1193,
        1194,
        1195
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "1212                     '--load-privkey', keyfile, '--label', label, '--id', obj_id]\n1213         subprocess.check_call(tool_args, env=tool_env)\n1214         id_str = '%{}{}%{}{}'.format(*obj_id)\n",
      "filename": "wireshark\\test\\suite_decryption.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 1213,
      "line_range": [
        1213
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "4 \n5 import subprocess\n6 import fixtures\n",
      "filename": "wireshark\\test\\suite_dfilter\\dfiltertest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 5,
      "line_range": [
        5
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "31         \"\"\"Run a display filter and expect a certain number of packets.\"\"\"\n32         output = subprocess.check_output(dfilter_cmd(dfilter),\n33                                          universal_newlines=True,\n34                                          stderr=subprocess.STDOUT,\n35                                          env=base_env)\n36 \n",
      "filename": "wireshark\\test\\suite_dfilter\\dfiltertest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 32,
      "line_range": [
        32,
        33,
        34,
        35
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "39             (expected_count, dfp_count, output)\n40         assert dfp_count == expected_count, msg\n41     return checkDFilterCount_real\n",
      "filename": "wireshark\\test\\suite_dfilter\\dfiltertest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 40,
      "line_range": [
        40
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "47         \"\"\"Run a display filter and expect dftest to fail.\"\"\"\n48         proc = subprocess.Popen([cmd_dftest, dfilter],\n49                                 stdout=subprocess.PIPE,\n50                                 stderr=subprocess.PIPE,\n51                                 universal_newlines=True,\n52                                 env=base_env)\n53         outs, errs = proc.communicate()\n",
      "filename": "wireshark\\test\\suite_dfilter\\dfiltertest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 48,
      "line_range": [
        48,
        49,
        50,
        51,
        52
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "53         outs, errs = proc.communicate()\n54         assert errs.strip() == 'dftest: %s' % (error_message,), \\\n55             'Unexpected dftest stderr:\\n%s\\nstdout:\\n%s' % (errs, outs)\n56         assert proc.returncode == 2, \\\n",
      "filename": "wireshark\\test\\suite_dfilter\\dfiltertest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 54,
      "line_range": [
        54,
        55
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "55             'Unexpected dftest stderr:\\n%s\\nstdout:\\n%s' % (errs, outs)\n56         assert proc.returncode == 2, \\\n57             'Unexpected dftest exit code: %d. stdout:\\n%s\\n' % \\\n58             (proc.returncode, outs)\n59     return checkDFilterFail_real\n",
      "filename": "wireshark\\test\\suite_dfilter\\dfiltertest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 56,
      "line_range": [
        56,
        57,
        58
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "12 import os.path\n13 import subprocesstest\n14 import unittest\n",
      "filename": "wireshark\\test\\suite_dissection.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocesstest module.",
      "line_number": 13,
      "line_range": [
        13
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "14 import fixtures\n15 import subprocesstest\n16 \n17 \n18 class _dissection_validator_real:\n",
      "filename": "wireshark\\test\\suite_dissectors\\dissectorstest.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocesstest module.",
      "line_number": 15,
      "line_range": [
        15,
        16,
        17
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "15 import fixtures\n16 import subprocesstest\n17 from suite_dissectors.dissectorstest import *\n",
      "filename": "wireshark\\test\\suite_dissectors\\group_asterix.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocesstest module.",
      "line_number": 16,
      "line_range": [
        16
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "10 \n11 import subprocesstest\n12 import fixtures\n",
      "filename": "wireshark\\test\\suite_extcaps.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocesstest module.",
      "line_number": 11,
      "line_range": [
        11
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "12 import os.path\n13 import subprocesstest\n14 import unittest\n",
      "filename": "wireshark\\test\\suite_fileformats.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocesstest module.",
      "line_number": 13,
      "line_range": [
        13
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "42                 )),\n43             shell=True)\n44         self.assertTrue(self.diffOutput(capture_proc.stdout_str, fileformats_baseline_str, 'tshark', baseline_file))\n45 \n46     def test_pcap_nsec_stdin(self, cmd_tshark, capture_file, fileformats_baseline_str):\n47         '''Microsecond pcap direct vs nanosecond pcap stdin'''\n48         capture_proc = self.assertRun(' '.join((cmd_tshark,\n49                 '-r', '-',\n50                 '-Tfields',\n",
      "filename": "wireshark\\test\\suite_fileformats.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 43,
      "line_range": [
        37,
        38,
        39,
        40,
        41,
        42,
        43
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "53                 )),\n54             shell=True)\n55         self.assertTrue(self.diffOutput(capture_proc.stdout_str, fileformats_baseline_str, 'tshark', baseline_file))\n56 \n57     def test_pcap_nsec_direct(self, cmd_tshark, capture_file, fileformats_baseline_str):\n58         '''Microsecond pcap direct vs nanosecond pcap direct'''\n59         capture_proc = self.assertRun((cmd_tshark,\n60                 '-r', capture_file('dhcp-nanosecond.pcap'),\n61                 '-Tfields',\n",
      "filename": "wireshark\\test\\suite_fileformats.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 54,
      "line_range": [
        48,
        49,
        50,
        51,
        52,
        53,
        54
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "78                 )),\n79             shell=True)\n80         self.assertTrue(self.diffOutput(capture_proc.stdout_str, fileformats_baseline_str, 'tshark', baseline_file))\n81 \n82     def test_pcapng_usec_direct(self, cmd_tshark, capture_file, fileformats_baseline_str):\n83         '''Microsecond pcap direct vs microsecond pcapng direct'''\n84         capture_proc = self.assertRun((cmd_tshark,\n85                 '-r', capture_file('dhcp.pcapng'),\n86                 '-Tfields',\n",
      "filename": "wireshark\\test\\suite_fileformats.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 79,
      "line_range": [
        73,
        74,
        75,
        76,
        77,
        78,
        79
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "99                 )),\n100             shell=True)\n101         self.assertTrue(self.diffOutput(capture_proc.stdout_str, fileformats_baseline_str, 'tshark', baseline_file))\n102 \n103     def test_pcapng_nsec_direct(self, cmd_tshark, capture_file, fileformats_baseline_str):\n104         '''Microsecond pcap direct vs nanosecond pcapng direct'''\n105         capture_proc = self.assertRun((cmd_tshark,\n106                 '-r', capture_file('dhcp-nanosecond.pcapng'),\n107                 '-Tfields',\n",
      "filename": "wireshark\\test\\suite_fileformats.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 100,
      "line_range": [
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "10 \n11 import subprocesstest\n12 import fixtures\n",
      "filename": "wireshark\\test\\suite_follow.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocesstest module.",
      "line_number": 11,
      "line_range": [
        11
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "13 import os.path\n14 import subprocesstest\n15 import sys\n",
      "filename": "wireshark\\test\\suite_io.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocesstest module.",
      "line_number": 14,
      "line_range": [
        14
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "42         stdin_cmd = '{0} | \"{1}\" -r - -w \"{2}\"'.format(cat_dhcp_cmd, cmd, testout_file)\n43         io_proc = self.assertRun(stdin_cmd, shell=True)\n44     elif to_stdout:\n",
      "filename": "wireshark\\test\\suite_io.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 43,
      "line_range": [
        43
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "46         stdout_cmd = '\"{0}\" -r \"{1}\" -w - > \"{2}\"'.format(cmd, capture_file('dhcp.pcap'), testout_file)\n47         io_proc = self.assertRun(stdout_cmd, shell=True)\n48     else: # direct->direct\n",
      "filename": "wireshark\\test\\suite_io.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 47,
      "line_range": [
        47
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "85         rawshark_cmd = '{0} | \"{1}\" -r - -n -dencap:1 -R \"udp.port==68\"'.format(raw_dhcp_cmd, cmd_rawshark)\n86         rawshark_proc = self.assertRun(rawshark_cmd, shell=True)\n87         self.assertTrue(self.diffOutput(rawshark_proc.stdout_str, io_baseline_str, 'rawshark', baseline_file))\n",
      "filename": "wireshark\\test\\suite_io.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 86,
      "line_range": [
        86
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "12 import re\n13 import subprocesstest\n14 import fixtures\n",
      "filename": "wireshark\\test\\suite_mergecap.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocesstest module.",
      "line_number": 13,
      "line_range": [
        13
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "13 import shutil\n14 import subprocesstest\n15 import fixtures\n",
      "filename": "wireshark\\test\\suite_nameres.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocesstest module.",
      "line_number": 14,
      "line_range": [
        14
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "12 import os.path\n13 import subprocesstest\n14 import fixtures\n",
      "filename": "wireshark\\test\\suite_outputformats.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocesstest module.",
      "line_number": 13,
      "line_range": [
        13
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "12 import re\n13 import subprocess\n14 import subprocesstest\n",
      "filename": "wireshark\\test\\suite_release.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 13,
      "line_range": [
        13
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "13 import subprocess\n14 import subprocesstest\n15 import types\n",
      "filename": "wireshark\\test\\suite_release.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocesstest module.",
      "line_number": 14,
      "line_range": [
        14
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "27     try:\n28         wireshark_v = subprocess.check_output(\n29             (cmd_wireshark, '--version'),\n30             stderr=subprocess.PIPE,\n31             universal_newlines=True,\n32             env=make_env()\n33         )\n",
      "filename": "wireshark\\test\\suite_release.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 28,
      "line_range": [
        28,
        29,
        30,
        31,
        32
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "12 import json\n13 import subprocess\n14 import unittest\n",
      "filename": "wireshark\\test\\suite_sharkd.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 13,
      "line_range": [
        13
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "14 import unittest\n15 import subprocesstest\n16 import fixtures\n",
      "filename": "wireshark\\test\\suite_sharkd.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocesstest module.",
      "line_number": 15,
      "line_range": [
        15
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "13 import re\n14 import subprocesstest\n15 import json\n",
      "filename": "wireshark\\test\\suite_text2pcap.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocesstest module.",
      "line_number": 14,
      "line_range": [
        14
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "120         )\n121         self.assertRun(tshark_cmd, shell=True)\n122 \n",
      "filename": "wireshark\\test\\suite_text2pcap.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 121,
      "line_range": [
        121
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "135         )\n136         self.assertRun(text2pcap_cmd, shell=True)\n137         self.assertTrue(self.grepOutput('potential packet'), \"text2pcap didn't complete\")\n",
      "filename": "wireshark\\test\\suite_text2pcap.py",
      "issue_confidence": "LOW",
      "issue_severity": "MEDIUM",
      "issue_text": "Function call with shell=True parameter identified, possible security issue.",
      "line_number": 136,
      "line_range": [
        136
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b604_any_other_function_with_shell_equals_true.html",
      "test_id": "B604",
      "test_name": "any_other_function_with_shell_equals_true"
    },
    {
      "code": "16 import re\n17 import subprocesstest\n18 import fixtures\n",
      "filename": "wireshark\\test\\suite_unittests.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocesstest module.",
      "line_number": 17,
      "line_range": [
        17
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "78         data = line.split(\"\\t\")\n79         assert len(data) == 3, \"expected 3 columns in %s\" % data\n80         assert data[0] == \"P\"\n",
      "filename": "wireshark\\test\\suite_unittests.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 79,
      "line_range": [
        79
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "79         assert len(data) == 3, \"expected 3 columns in %s\" % data\n80         assert data[0] == \"P\"\n81         self.name = data[1]\n",
      "filename": "wireshark\\test\\suite_unittests.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 80,
      "line_range": [
        80
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "87         data = line.split(\"\\t\")\n88         assert len(data) == 8, \"expected 8 columns in %s\" % data\n89         assert data[0] == \"F\"\n",
      "filename": "wireshark\\test\\suite_unittests.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 88,
      "line_range": [
        88
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "88         assert len(data) == 8, \"expected 8 columns in %s\" % data\n89         assert data[0] == \"F\"\n90         self.name = data[1]\n",
      "filename": "wireshark\\test\\suite_unittests.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 89,
      "line_range": [
        89
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "14 import shutil\n15 import subprocess\n16 import subprocesstest\n",
      "filename": "wireshark\\test\\suite_wslua.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 15,
      "line_range": [
        15
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "15 import subprocess\n16 import subprocesstest\n17 import unittest\n",
      "filename": "wireshark\\test\\suite_wslua.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocesstest module.",
      "line_number": 16,
      "line_range": [
        16
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "298         # Run process from a Unicode path as working directory.\n299         proc = subprocess.Popen((cmd_tshark, '-r', uni_pcap), env=unicode_env.env,\n300                                 stdout=subprocess.PIPE,\n301                                 stderr=subprocess.PIPE,\n302                                 cwd=unicode_env.path())\n303         stdout, stderr = proc.communicate(timeout=60)\n",
      "filename": "wireshark\\test\\suite_wslua.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 299,
      "line_range": [
        299,
        300,
        301,
        302
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "313         self.assertIn('All tests passed!', stdout_str)\n314         assert stderr_str == \"\"\n315         with open(unicode_env.path('written-by-lua-\u0424-\u20ac-\u4e2d.txt'), encoding='utf8') as f:\n",
      "filename": "wireshark\\test\\suite_wslua.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 314,
      "line_range": [
        314
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "315         with open(unicode_env.path('written-by-lua-\u0424-\u20ac-\u4e2d.txt'), encoding='utf8') as f:\n316             assert f.read() == 'Feedback from Lua: \u0424-\u20ac-\u4e2d\\n'\n",
      "filename": "wireshark\\test\\suite_wslua.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 316,
      "line_range": [
        316
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "9 import sys\n10 import xml.sax\n11 from xml.sax.saxutils import quoteattr\n",
      "filename": "wireshark\\tools\\WiresharkXML.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Using xml.sax to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.sax with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.",
      "line_number": 10,
      "line_range": [
        10
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b406-import-xml-sax",
      "test_id": "B406",
      "test_name": "blacklist"
    },
    {
      "code": "10 import xml.sax\n11 from xml.sax.saxutils import quoteattr\n12 import cStringIO as StringIO\n",
      "filename": "wireshark\\tools\\WiresharkXML.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Using quoteattr to parse untrusted XML data is known to be vulnerable to XML attacks. Replace quoteattr with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.",
      "line_number": 11,
      "line_range": [
        11
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b406-import-xml-sax",
      "test_id": "B406",
      "test_name": "blacklist"
    },
    {
      "code": "270     # Create a parser\n271     parser = xml.sax.make_parser()\n272 \n",
      "filename": "wireshark\\tools\\WiresharkXML.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Using xml.sax.make_parser to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.sax.make_parser with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called",
      "line_number": 271,
      "line_range": [
        271
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b313-b320-xml-bad-sax",
      "test_id": "B317",
      "test_name": "blacklist"
    },
    {
      "code": "451         self.indent_lev -= 1\n452         assert (self.indent_lev >= 0)\n453     def register_assignment (self, ident, val, dependencies):\n",
      "filename": "wireshark\\tools\\asn2wrs.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 452,
      "line_range": [
        452
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "486                     to_output_count -= 1\n487                     assert (to_output_count >= 0)\n488             if not any_output:\n",
      "filename": "wireshark\\tools\\asn2wrs.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 487,
      "line_range": [
        487
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "3044         else:\n3045             assert (len(args) == 1)\n3046             self.type = args[0]\n",
      "filename": "wireshark\\tools\\asn2wrs.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 3045,
      "line_range": [
        3045
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "3716     def to_python (self, ctx): # not to be used directly\n3717         assert (0)\n3718 \n",
      "filename": "wireshark\\tools\\asn2wrs.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 3717,
      "line_range": [
        3717
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "4286         def elt_to_py (e):\n4287             assert (e.type == 'elt_type')\n4288             nt = e.val\n",
      "filename": "wireshark\\tools\\asn2wrs.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 4287,
      "line_range": [
        4287
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "4290             #assert (not hasattr (e, 'default')) # XXX add support for DEFAULT!\n4291             assert (nt.type == 'named_type')\n4292             tagstr = 'None'\n",
      "filename": "wireshark\\tools\\asn2wrs.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 4291,
      "line_range": [
        4291
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "4406         def elt_to_py (nt):\n4407             assert (nt.type == 'named_type')\n4408             tagstr = 'None'\n",
      "filename": "wireshark\\tools\\asn2wrs.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 4407,
      "line_range": [
        4407
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "7883 def do_module (ast, defined_dict):\n7884     assert (ast.type == 'Module')\n7885     ctx = Ctx (defined_dict)\n",
      "filename": "wireshark\\tools\\asn2wrs.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 7884,
      "line_range": [
        7884
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "7890 def eth_do_module (ast, ectx):\n7891     assert (ast.type == 'Module')\n7892     if ectx.dbg('s'): print(ast.str_depth(0))\n",
      "filename": "wireshark\\tools\\asn2wrs.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 7891,
      "line_range": [
        7891
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "8084         while True:\n8085             s = eval(input ('Query: '))\n8086             if len (s) == 0:\n",
      "filename": "wireshark\\tools\\asn2wrs.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Use of possibly insecure function - consider using safer ast.literal_eval.",
      "line_number": 8085,
      "line_range": [
        8085
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b307-eval",
      "test_id": "B307",
      "test_name": "blacklist"
    },
    {
      "code": "8084         while True:\n8085             s = eval(input ('Query: '))\n8086             if len (s) == 0:\n",
      "filename": "wireshark\\tools\\asn2wrs.py",
      "issue_confidence": "HIGH",
      "issue_severity": "HIGH",
      "issue_text": "The input method in Python 2 will read from standard input, evaluate and run the resulting string as python source code. This is similar, though in many ways worse, then using eval. On Python 2, use raw_input instead, input is safe in Python 3.",
      "line_number": 8085,
      "line_range": [
        8085
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b322-input",
      "test_id": "B322",
      "test_name": "blacklist"
    },
    {
      "code": "12 import signal\n13 import subprocess\n14 \n15 import requests\n",
      "filename": "wireshark\\tools\\check_dissector_urls.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 13,
      "line_range": [
        13,
        14
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "193     files = [f.decode('utf-8')\n194              for f in subprocess.check_output(command).splitlines()]\n195     # Fetch links from files (dissectors files only)\n",
      "filename": "wireshark\\tools\\check_dissector_urls.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 194,
      "line_range": [
        194
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "202     files = [f.decode('utf-8')\n203              for f in subprocess.check_output(command).splitlines()]\n204     files = list(filter(lambda f: is_dissector_file(f), files))\n",
      "filename": "wireshark\\tools\\check_dissector_urls.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 203,
      "line_range": [
        203
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "207     files_staged = [f.decode('utf-8')\n208                     for f in subprocess.check_output(command).splitlines()]\n209     files_staged = list(filter(lambda f: is_dissector_file(f), files_staged))\n",
      "filename": "wireshark\\tools\\check_dissector_urls.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 208,
      "line_range": [
        208
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "9 import re\n10 import subprocess\n11 import argparse\n",
      "filename": "wireshark\\tools\\check_spelling.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 10,
      "line_range": [
        10
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "328     files = [f.decode('utf-8')\n329              for f in subprocess.check_output(command).splitlines()]\n330     # Will examine dissector files only\n",
      "filename": "wireshark\\tools\\check_spelling.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 329,
      "line_range": [
        329
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "335     files = [f.decode('utf-8')\n336              for f in subprocess.check_output(command).splitlines()]\n337     # Only interested in dissector files.\n",
      "filename": "wireshark\\tools\\check_spelling.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 336,
      "line_range": [
        336
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "341     files_staged = [f.decode('utf-8')\n342                     for f in subprocess.check_output(command).splitlines()]\n343     # Only interested in dissector files.\n",
      "filename": "wireshark\\tools\\check_spelling.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 342,
      "line_range": [
        342
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "9 import re\n10 import subprocess\n11 import argparse\n",
      "filename": "wireshark\\tools\\check_tfs.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 10,
      "line_range": [
        10
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "167     files = [f.decode('utf-8')\n168              for f in subprocess.check_output(command).splitlines()]\n169     # Will examine dissector files only\n",
      "filename": "wireshark\\tools\\check_tfs.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 168,
      "line_range": [
        168
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "174     files = [f.decode('utf-8')\n175              for f in subprocess.check_output(command).splitlines()]\n176     # Only interested in dissector files.\n",
      "filename": "wireshark\\tools\\check_tfs.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 175,
      "line_range": [
        175
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "180     files_staged = [f.decode('utf-8')\n181                     for f in subprocess.check_output(command).splitlines()]\n182     # Only interested in dissector files.\n",
      "filename": "wireshark\\tools\\check_tfs.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 181,
      "line_range": [
        181
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "11 import signal\n12 import subprocess\n13 \n14 # This utility scans the dissector code for proto_tree_add_...() calls constrain the type of the\n15 # item added, and checks that the used item is acceptable.\n16 #\n17 # Note that this can only work where the hf_item variable is passed in directly - where it\n18 # is assigned to a different variable it isn't tracked.\n19 \n20 # TODO:\n21 # Attempt to check length (where literal value is given). Arg position differs among functions.\n22 # Currently assuming we'll find call + first 2 args in same line...\n23 # Attempt to check for allowed encoding types (most likely will be literal values |'d)?\n24 \n25 \n26 # Try to exit soon after Ctrl-C is pressed.\n27 should_exit = False\n",
      "filename": "wireshark\\tools\\check_typed_item_calls.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 12,
      "line_range": [
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "48                self.length = int(length)\n49            except:\n50                pass\n",
      "filename": "wireshark\\tools\\check_typed_item_calls.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 49,
      "line_range": [
        49
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "271 \n272         except Exception:\n273             # Sometimes, macro is used for item type so catch and keep going.\n",
      "filename": "wireshark\\tools\\check_typed_item_calls.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 272,
      "line_range": [
        272
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "451     files = [f.decode('utf-8')\n452              for f in subprocess.check_output(command).splitlines()]\n453     # Will examine dissector files only\n",
      "filename": "wireshark\\tools\\check_typed_item_calls.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 452,
      "line_range": [
        452
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "458     files = [f.decode('utf-8')\n459              for f in subprocess.check_output(command).splitlines()]\n460     # Only interested in dissector files.\n",
      "filename": "wireshark\\tools\\check_typed_item_calls.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 459,
      "line_range": [
        459
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "464     files_staged = [f.decode('utf-8')\n465                     for f in subprocess.check_output(command).splitlines()]\n466     # Only interested in dissector files.\n",
      "filename": "wireshark\\tools\\check_typed_item_calls.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 465,
      "line_range": [
        465
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "10 import os.path\n11 import subprocess\n12 import sys\n",
      "filename": "wireshark\\tools\\checklicenses.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 11,
      "line_range": [
        11
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "182 \n183   licensecheck = subprocess.Popen([licensecheck_path,\n184                                    '-l', '150',\n185                                    '-r', start_dir],\n186                                   stdout=subprocess.PIPE,\n187                                   stderr=subprocess.PIPE)\n188   stdout, stderr = licensecheck.communicate()\n",
      "filename": "wireshark\\tools\\checklicenses.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 183,
      "line_range": [
        183,
        184,
        185,
        186,
        187
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "13 \n14 import subprocess\n15 import os\n",
      "filename": "wireshark\\tools\\delete_includes.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 14,
      "line_range": [
        14
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "152     os.chdir(run_folder)\n153     result = subprocess.call(make_command)\n154     # Restore proper file & delete temp files\n",
      "filename": "wireshark\\tools\\delete_includes.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 153,
      "line_range": [
        153
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "264             os.chdir(run_folder)\n265             result = subprocess.call(make_command)\n266             if result == 0:\n",
      "filename": "wireshark\\tools\\delete_includes.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 265,
      "line_range": [
        265
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "339 print('***** Doing an initial build to check we have a stable base.')\n340 result = subprocess.call(make_command)\n341 if result != 0:\n",
      "filename": "wireshark\\tools\\delete_includes.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 340,
      "line_range": [
        340
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "315 \n316     assert len(enums) == len(EXPORT_ENUMS), \\\n317             \"Could not parse data, found %d/%d results\" % \\\n318             (len(enums), len(EXPORT_ENUMS))\n319 \n320     code_enums, code_vals, code_hfi, code_ett_defs, code_hfi_init, code_ett = '', '', '', '', '', ''\n",
      "filename": "wireshark\\tools\\generate-nl80211-fields.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 316,
      "line_range": [
        316,
        317,
        318,
        319
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "40         req = urllib.request.Request(url, headers=req_headers)\n41         response = urllib.request.urlopen(req)\n42         lines = response.read().decode().splitlines()\n",
      "filename": "wireshark\\tools\\generate-sysdig-event.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.",
      "line_number": 41,
      "line_range": [
        41
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b310-urllib-urlopen",
      "test_id": "B310",
      "test_name": "blacklist"
    },
    {
      "code": "19 import os\n20 import subprocess\n21 import re\n",
      "filename": "wireshark\\tools\\indexcap.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 20,
      "line_range": [
        20
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "21 import re\n22 import pickle\n23 import tempfile\n",
      "filename": "wireshark\\tools\\indexcap.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with pickle module.",
      "line_number": 22,
      "line_range": [
        22
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "29         cmd = [tshark, \"-Tfields\", \"-e\", \"frame.protocols\", \"-r\", file]\n30         p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n31         (stdout, stderr) = p.communicate()\n",
      "filename": "wireshark\\tools\\indexcap.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 30,
      "line_range": [
        30
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "72         cmd = [tshark, \"-nxVr\", file]\n73         p = subprocess.Popen(cmd, stdout=handle_o, stderr=handle_e)\n74         (stdout, stderr) = p.communicate()\n",
      "filename": "wireshark\\tools\\indexcap.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 73,
      "line_range": [
        73
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "219         print(\"index file: %s [OPENED]\" % index_file.name)\n220         cap_hash = pickle.load(index_file)\n221         index_file.close()\n",
      "filename": "wireshark\\tools\\indexcap.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 220,
      "line_range": [
        220
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "191         else:\n192             exec('import %s' % tabfile)\n193             lextab = sys.modules[tabfile]\n",
      "filename": "wireshark\\tools\\lex.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Use of exec detected.",
      "line_number": 192,
      "line_range": [
        192
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b102_exec_used.html",
      "test_id": "B102",
      "test_name": "exec_used"
    },
    {
      "code": "1012                     pkgname = '.'.join(parts[:-1])\n1013                     exec('import %s' % pkgname)\n1014                     srcfile = getattr(sys.modules[pkgname], '__file__', '')\n",
      "filename": "wireshark\\tools\\lex.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Use of exec detected.",
      "line_number": 1013,
      "line_range": [
        1013
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b102_exec_used.html",
      "test_id": "B102",
      "test_name": "exec_used"
    },
    {
      "code": "52         req = urllib.request.Request(url, headers=req_headers)\n53         response = urllib.request.urlopen(req)\n54         body = response.read().decode('UTF-8', 'replace')\n",
      "filename": "wireshark\\tools\\make-manuf.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.",
      "line_number": 53,
      "line_range": [
        53
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b310-urllib-urlopen",
      "test_id": "B310",
      "test_name": "blacklist"
    },
    {
      "code": "13 import re\n14 import subprocess\n15 import sys\n",
      "filename": "wireshark\\tools\\make-no-reassembly-profile.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 14,
      "line_range": [
        14
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "40     ]\n41     cp = subprocess.run([tshark_path, '-G', 'defaultprefs'], stdout=subprocess.PIPE, check=True, encoding='utf-8')\n42     pref_lines = cp.stdout.splitlines()\n",
      "filename": "wireshark\\tools\\make-no-reassembly-profile.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 41,
      "line_range": [
        41
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "4 import itertools\n5 import lxml.etree\n6 \n7 # This utility scrapes the DICOM standard document in DocBook format, finds the appropriate tables,\n8 # and extracts the data needed to build the lists of DICOM attributes, UIDs and value representations.\n9 \n10 # If the files part05.xml, part06.xml and part07.xml exist in the current directory, use them.\n11 # Otherwise, download the current release from the current DICOM official sources.\n12 if os.path.exists(\"part05.xml\"):\n",
      "filename": "wireshark\\tools\\make-packet-dcm.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Using lxml.etree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace lxml.etree with the equivalent defusedxml package.",
      "line_number": 5,
      "line_range": [
        5,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b410-import-lxml",
      "test_id": "B410",
      "test_name": "blacklist"
    },
    {
      "code": "13     print(\"Using local part05 docbook.\", file=sys.stderr)\n14     part05 = lxml.etree.parse(\"part05.xml\")\n15 else:\n",
      "filename": "wireshark\\tools\\make-packet-dcm.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Using lxml.etree.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace lxml.etree.parse with its defusedxml equivalent function.",
      "line_number": 14,
      "line_range": [
        14
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b313-b320-xml-bad-etree",
      "test_id": "B320",
      "test_name": "blacklist"
    },
    {
      "code": "16     print(\"Downloading part05 docbook...\", file=sys.stderr)\n17     part05 = lxml.etree.parse(\"http://dicom.nema.org/medical/dicom/current/source/docbook/part05/part05.xml\")\n18 if os.path.exists(\"part06.xml\"):\n",
      "filename": "wireshark\\tools\\make-packet-dcm.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Using lxml.etree.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace lxml.etree.parse with its defusedxml equivalent function.",
      "line_number": 17,
      "line_range": [
        17
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b313-b320-xml-bad-etree",
      "test_id": "B320",
      "test_name": "blacklist"
    },
    {
      "code": "19     print(\"Using local part06 docbook.\", file=sys.stderr)\n20     part06 = lxml.etree.parse(\"part06.xml\")\n21 else:\n",
      "filename": "wireshark\\tools\\make-packet-dcm.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Using lxml.etree.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace lxml.etree.parse with its defusedxml equivalent function.",
      "line_number": 20,
      "line_range": [
        20
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b313-b320-xml-bad-etree",
      "test_id": "B320",
      "test_name": "blacklist"
    },
    {
      "code": "22     print(\"Downloading part06 docbook...\", file=sys.stderr)\n23     part06 = lxml.etree.parse(\"http://dicom.nema.org/medical/dicom/current/source/docbook/part06/part06.xml\")\n24 if os.path.exists(\"part07.xml\"):\n",
      "filename": "wireshark\\tools\\make-packet-dcm.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Using lxml.etree.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace lxml.etree.parse with its defusedxml equivalent function.",
      "line_number": 23,
      "line_range": [
        23
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b313-b320-xml-bad-etree",
      "test_id": "B320",
      "test_name": "blacklist"
    },
    {
      "code": "25     print(\"Using local part07 docbook.\", file=sys.stderr)\n26     part07 = lxml.etree.parse(\"part07.xml\")\n27 else:\n",
      "filename": "wireshark\\tools\\make-packet-dcm.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Using lxml.etree.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace lxml.etree.parse with its defusedxml equivalent function.",
      "line_number": 26,
      "line_range": [
        26
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b313-b320-xml-bad-etree",
      "test_id": "B320",
      "test_name": "blacklist"
    },
    {
      "code": "28     print(\"Downloading part07 docbook...\", file=sys.stderr)\n29     part07 = lxml.etree.parse(\"http://dicom.nema.org/medical/dicom/current/source/docbook/part07/part07.xml\")\n30 dbns = {'db':'http://docbook.org/ns/docbook', 'xml':'http://www.w3.org/XML/1998/namespace'}\n",
      "filename": "wireshark\\tools\\make-packet-dcm.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Using lxml.etree.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace lxml.etree.parse with its defusedxml equivalent function.",
      "line_number": 29,
      "line_range": [
        29
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b313-b320-xml-bad-etree",
      "test_id": "B320",
      "test_name": "blacklist"
    },
    {
      "code": "176         else:\n177             req = urllib.request.urlopen(svc_url)\n178             svc_fd = codecs.getreader('utf8')(req)\n",
      "filename": "wireshark\\tools\\make-services.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.",
      "line_number": 177,
      "line_range": [
        177
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b310-urllib-urlopen",
      "test_id": "B310",
      "test_name": "blacklist"
    },
    {
      "code": "28 req = urllib.request.Request('https://usb-ids.gowdy.us/usb.ids', headers=req_headers)\n29 response = urllib.request.urlopen(req)\n30 lines = response.read().decode('UTF-8', 'replace').splitlines()\n",
      "filename": "wireshark\\tools\\make-usb.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.",
      "line_number": 29,
      "line_range": [
        29
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b310-urllib-urlopen",
      "test_id": "B310",
      "test_name": "blacklist"
    },
    {
      "code": "189         \"It the list empty (different from a null list)?\"\n190         assert(not self.Null())\n191 \n192         if self.list:\n",
      "filename": "wireshark\\tools\\ncp2222.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 190,
      "line_range": [
        190,
        191
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "284                     field = ptvc_rec.Field()\n285                     assert 0, \"Cannot make PTVC from %s, type %s\" % \\\n286                             (field.HFName(), field)\n287 \n",
      "filename": "wireshark\\tools\\ncp2222.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 285,
      "line_range": [
        285,
        286
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "383             req_cond = global_req_cond[self.req_cond]\n384             assert req_cond is not None\n385 \n",
      "filename": "wireshark\\tools\\ncp2222.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 384,
      "line_range": [
        384
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "417 \n418         assert length, \"Length not handled for %s\" % (self.field.HFName(),)\n419 \n420         sub_ptvc_name = self.field.PTVCName()\n",
      "filename": "wireshark\\tools\\ncp2222.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 418,
      "line_range": [
        418,
        419
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "865             else:\n866                 assert 0, \"Item %s item not handled.\" % (item,)\n867 \n",
      "filename": "wireshark\\tools\\ncp2222.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 866,
      "line_range": [
        866
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "22 import re\n23 import xml.sax.handler\n24 \n25 indentation = 0\n",
      "filename": "wireshark\\tools\\parse_xml2skinny_dissector.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Using xml.sax.handler to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.sax.handler with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.",
      "line_number": 23,
      "line_range": [
        23,
        24
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b406-import-xml-sax",
      "test_id": "B406",
      "test_name": "blacklist"
    },
    {
      "code": "972     builder = TreeBuilder()\n973     xml.sax.parse(src, builder)\n974     return builder.root._attrs.values()[0]\n",
      "filename": "wireshark\\tools\\parse_xml2skinny_dissector.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Using xml.sax.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.sax.parse with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called",
      "line_number": 973,
      "line_range": [
        973
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b313-b320-xml-bad-sax",
      "test_id": "B317",
      "test_name": "blacklist"
    },
    {
      "code": "16 import signal\n17 import subprocess\n18 import sys\n",
      "filename": "wireshark\\tools\\sharkd_shell.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 17,
      "line_range": [
        17
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "62         env['WIRESHARK_CONFIG_DIR'] = '/nonexistent'\n63         proc = subprocess.Popen([sharkd, '-'],\n64                                 stdin=subprocess.PIPE,\n65                                 stdout=subprocess.PIPE,\n66                                 stderr=subprocess.PIPE,\n67                                 env=env,\n68                                 preexec_fn=self.ignore_sigint)\n69         banner = proc.stderr.read1().decode('utf8')\n",
      "filename": "wireshark\\tools\\sharkd_shell.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 63,
      "line_range": [
        63,
        64,
        65,
        66,
        67,
        68
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "199             try:\n200                 origline = input('# ')\n201             except EOFError:\n",
      "filename": "wireshark\\tools\\sharkd_shell.py",
      "issue_confidence": "HIGH",
      "issue_severity": "HIGH",
      "issue_text": "The input method in Python 2 will read from standard input, evaluate and run the resulting string as python source code. This is similar, though in many ways worse, then using eval. On Python 2, use raw_input instead, input is safe in Python 3.",
      "line_number": 200,
      "line_range": [
        200
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b322-input",
      "test_id": "B322",
      "test_name": "blacklist"
    },
    {
      "code": "273                 if self.pretty == 'jq':\n274                     subprocess.run(['jq', '.'], input=resp,\n275                                    universal_newlines=True)\n276                 elif self.pretty == 'indent':\n",
      "filename": "wireshark\\tools\\sharkd_shell.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 274,
      "line_range": [
        274,
        275
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "273                 if self.pretty == 'jq':\n274                     subprocess.run(['jq', '.'], input=resp,\n275                                    universal_newlines=True)\n276                 elif self.pretty == 'indent':\n",
      "filename": "wireshark\\tools\\sharkd_shell.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 274,
      "line_range": [
        274,
        275
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "33 import re\n34 import subprocess\n35 import sys\n",
      "filename": "wireshark\\tools\\update-appdata.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 34,
      "line_range": [
        34
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "46     try:\n47         tag_cp = subprocess.run(\n48             ['git', 'tag', '-l', 'wireshark-*'],\n49             encoding='UTF-8',\n50             stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n51         if not 'wireshark-' in tag_cp.stdout:\n",
      "filename": "wireshark\\tools\\update-appdata.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 47,
      "line_range": [
        47,
        48,
        49,
        50
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "46     try:\n47         tag_cp = subprocess.run(\n48             ['git', 'tag', '-l', 'wireshark-*'],\n49             encoding='UTF-8',\n50             stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n51         if not 'wireshark-' in tag_cp.stdout:\n",
      "filename": "wireshark\\tools\\update-appdata.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 47,
      "line_range": [
        47,
        48,
        49,
        50
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "58     try:\n59         cur_rc0 = subprocess.run(\n60             ['git', 'describe', '--match', 'v*rc0'],\n61             check=True,\n62             encoding='UTF-8',\n63             stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout\n64     except Exception:\n",
      "filename": "wireshark\\tools\\update-appdata.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 59,
      "line_range": [
        59,
        60,
        61,
        62,
        63
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "58     try:\n59         cur_rc0 = subprocess.run(\n60             ['git', 'describe', '--match', 'v*rc0'],\n61             check=True,\n62             encoding='UTF-8',\n63             stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout\n64     except Exception:\n",
      "filename": "wireshark\\tools\\update-appdata.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 59,
      "line_range": [
        59,
        60,
        61,
        62,
        63
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "86         try:\n87             tag_date = subprocess.run(\n88                 ['git', 'log', '-1', '--format=%cd', '--date=format:%F', 'v{}.{}'.format(maj_min, micro)],\n89                 check=True,\n90                 encoding='UTF-8',\n91                 stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.strip()\n92             release_tag_l.append(release_tag_fmt.format(maj_min, micro, tag_date))\n",
      "filename": "wireshark\\tools\\update-appdata.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 87,
      "line_range": [
        87,
        88,
        89,
        90,
        91
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "86         try:\n87             tag_date = subprocess.run(\n88                 ['git', 'log', '-1', '--format=%cd', '--date=format:%F', 'v{}.{}'.format(maj_min, micro)],\n89                 check=True,\n90                 encoding='UTF-8',\n91                 stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.strip()\n92             release_tag_l.append(release_tag_fmt.format(maj_min, micro, tag_date))\n",
      "filename": "wireshark\\tools\\update-appdata.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 87,
      "line_range": [
        87,
        88,
        89,
        90,
        91
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "22 import re\n23 import subprocess\n24 import sys\n",
      "filename": "wireshark\\tools\\update-tools-help.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 23,
      "line_range": [
        23
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "64         try:\n65             new_help_data = subprocess.check_output((thf_command, thf_flag), stderr=null_fd)\n66         except subprocess.CalledProcessError as e:\n",
      "filename": "wireshark\\tools\\update-tools-help.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 65,
      "line_range": [
        65
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "19 import os\n20 import subprocess\n21 import sys\n",
      "filename": "wireshark\\tools\\validate-commit.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with subprocess module.",
      "line_number": 20,
      "line_range": [
        20
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "95     cmd = ['git', 'rev-parse', '--show-toplevel']\n96     srcdir = subprocess.check_output(cmd, universal_newlines=True).strip()\n97     return os.path.join(srcdir, 'tools')\n",
      "filename": "wireshark\\tools\\validate-commit.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 96,
      "line_range": [
        96
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "145         cmd = ['git', 'stripspace']\n146         newbody = subprocess.check_output(cmd, input=body, universal_newlines=True)\n147     except OSError as ex:\n",
      "filename": "wireshark\\tools\\validate-commit.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 146,
      "line_range": [
        146
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "187     # print('req', repr(req))\n188     with urllib.request.urlopen(req) as resp:\n189         resp_json = resp.read().decode('utf-8')\n",
      "filename": "wireshark\\tools\\validate-commit.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.",
      "line_number": 188,
      "line_range": [
        188
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b310-urllib-urlopen",
      "test_id": "B310",
      "test_name": "blacklist"
    },
    {
      "code": "209            '--format=%h%n%an%n%ae%n%B', commit, '--']\n210     output = subprocess.check_output(cmd, universal_newlines=True)\n211     # For some reason there is always an additional LF in the output, drop it.\n",
      "filename": "wireshark\\tools\\validate-commit.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 210,
      "line_range": [
        210
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "1483     def set_precedence(self, term, assoc, level):\n1484         assert self.Productions == [None], 'Must call set_precedence() before add_production()'\n1485         if term in self.Precedence:\n",
      "filename": "wireshark\\tools\\yacc.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.",
      "line_number": 1484,
      "line_range": [
        1484
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b101_assert_used.html",
      "test_id": "B101",
      "test_name": "assert_used"
    },
    {
      "code": "1520                 try:\n1521                     c = eval(s)\n1522                     if (len(c) > 1):\n",
      "filename": "wireshark\\tools\\yacc.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Use of possibly insecure function - consider using safer ast.literal_eval.",
      "line_number": 1521,
      "line_range": [
        1521
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b307-eval",
      "test_id": "B307",
      "test_name": "blacklist"
    },
    {
      "code": "1940         else:\n1941             exec('import %s' % module)\n1942             parsetab = sys.modules[module]\n",
      "filename": "wireshark\\tools\\yacc.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Use of exec detected.",
      "line_number": 1941,
      "line_range": [
        1941
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b102_exec_used.html",
      "test_id": "B102",
      "test_name": "exec_used"
    },
    {
      "code": "1958         try:\n1959             import cPickle as pickle\n1960         except ImportError:\n",
      "filename": "wireshark\\tools\\yacc.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with cPickle module.",
      "line_number": 1959,
      "line_range": [
        1959
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "1960         except ImportError:\n1961             import pickle\n1962 \n",
      "filename": "wireshark\\tools\\yacc.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with pickle module.",
      "line_number": 1961,
      "line_range": [
        1961
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "1967 \n1968         tabversion = pickle.load(in_f)\n1969         if tabversion != __tabversion__:\n",
      "filename": "wireshark\\tools\\yacc.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 1968,
      "line_range": [
        1968
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "1970             raise VersionError('yacc table file version is out of date')\n1971         self.lr_method = pickle.load(in_f)\n1972         signature      = pickle.load(in_f)\n",
      "filename": "wireshark\\tools\\yacc.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 1971,
      "line_range": [
        1971
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "1971         self.lr_method = pickle.load(in_f)\n1972         signature      = pickle.load(in_f)\n1973         self.lr_action = pickle.load(in_f)\n",
      "filename": "wireshark\\tools\\yacc.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 1972,
      "line_range": [
        1972
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "1972         signature      = pickle.load(in_f)\n1973         self.lr_action = pickle.load(in_f)\n1974         self.lr_goto   = pickle.load(in_f)\n",
      "filename": "wireshark\\tools\\yacc.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 1973,
      "line_range": [
        1973
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "1973         self.lr_action = pickle.load(in_f)\n1974         self.lr_goto   = pickle.load(in_f)\n1975         productions    = pickle.load(in_f)\n",
      "filename": "wireshark\\tools\\yacc.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 1974,
      "line_range": [
        1974
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "1974         self.lr_goto   = pickle.load(in_f)\n1975         productions    = pickle.load(in_f)\n1976 \n",
      "filename": "wireshark\\tools\\yacc.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 1975,
      "line_range": [
        1975
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "2798         try:\n2799             import cPickle as pickle\n2800         except ImportError:\n",
      "filename": "wireshark\\tools\\yacc.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with cPickle module.",
      "line_number": 2799,
      "line_range": [
        2799
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "2800         except ImportError:\n2801             import pickle\n2802         with open(filename, 'wb') as outf:\n",
      "filename": "wireshark\\tools\\yacc.py",
      "issue_confidence": "HIGH",
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with pickle module.",
      "line_number": 2801,
      "line_range": [
        2801
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "3207                 pkgname = '.'.join(parts[:-1])\n3208                 exec('import %s' % pkgname)\n3209                 srcfile = getattr(sys.modules[pkgname], '__file__', '')\n",
      "filename": "wireshark\\tools\\yacc.py",
      "issue_confidence": "HIGH",
      "issue_severity": "MEDIUM",
      "issue_text": "Use of exec detected.",
      "line_number": 3208,
      "line_range": [
        3208
      ],
      "more_info": "https://bandit.readthedocs.io/en/latest/plugins/b102_exec_used.html",
      "test_id": "B102",
      "test_name": "exec_used"
    }
  ]
}